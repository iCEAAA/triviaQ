{"Questions":[{"Question":"An IDOR vulnerability is best described as when:","Explanation":"An IDOR (Insecure direct object reference) vulnerability occurs when authorisation requirements are improperly implemented. This allows for users to access documents that shouldn't be able to be viewed, through methods that can be as simple as changing a parameter.","Image":"","isToF":false,"ToFAnswer":false,"Answers":[{"Text":"Files are stored in the wrong location, resulting in incorrect files being served.","Correct":false},{"Text":"Resources are inaccessible by anyone due to incorrect authorisation requirements.","Correct":false},{"Text":"Authorisation requirements are not implemented for accessing resources.","Correct":true},{"Text":"None of the options.","Correct":false}]},{"Question":"It is recommended to assign simple and non-random sequences of numbers as document identifiers as it makes accessing and manipulating resources easier.","Explanation":"Attackers can more easily exploit vulnerabilities to access resources when the identifiers for those resources are easy to determine.","Image":"","isToF":true,"ToFAnswer":false,"Answers":[]},{"Question":"GUIDs and UUIDs are both examples of magic numbers, they are unsuitable to be used as resource identifiers.","Explanation":"Magic numbers are typically numbers that are simple sequences of numbers, they are unsuitable for use as an identifier for a document. Both GUIDs (globally unique identifiers) and UUIDs (universally unique identifiers) are designed to be difficult to enumerate through.","Image":"","isToF":true,"ToFAnswer":false,"Answers":[]},{"Question":"Which of the following are characteristics of a SQL injection?","Explanation":"SQL injections can be used to access otherwise hidden information, but they can be prevented with proper input sanitisation, among other techniques. They can also affect any database that uses SQL, so they are not limited to only outdated databases.","Image":"","isToF":false,"ToFAnswer":false,"Answers":[{"Text":"Can be used to access information that is otherwise not accessible.","Correct":true},{"Text":"Can only be prevented with input sanitisation.","Correct":false},{"Text":"Is a technique that can only affect outdated databases.","Correct":false},{"Text":"Can be used to access information, that is otherwise not accessible, and can only be prevented with input sanitisation.","Correct":false}]},{"Question":"Assuming there is improper input sanitisation, which of the following requests will allow access into every row in a table?","Explanation":"The request \"/users?id=53' OR '1'='1\" will generate a query that appears as \"SELECT * FROM Users where id='53' OR '1'='1' \", thus allowing access into all rows within the table.","Image":"","isToF":false,"ToFAnswer":false,"Answers":[{"Text":"/users?id=53' OR '1'='1","Correct":true},{"Text":"/users?id=53' OR 1=1","Correct":false},{"Text":"/users?id=53' OR '1'='1'","Correct":false},{"Text":"None of the options.","Correct":false}]},{"Question":"Entering a password as \"password' OR '1' = '1' will always grant an attacker access to any account, assuming the entered username is correct.","Explanation":"The attempted SQL injection will fail if a database has proper input sanitisation or has other authentication systems in place.","Image":"","isToF":true,"ToFAnswer":false,"Answers":[]},{"Question":"Parameterised queries are:","Explanation":"Parameterised queries are a solution to countering SQL injections by sanitising user input to meet certain conditions.","Image":"","isToF":false,"ToFAnswer":false,"Answers":[{"Text":"A solution to countering SQL injections.","Correct":false},{"Text":"One way of sanitising user input.","Correct":false},{"Text":"A type of query in which the inputs are checked to ensure they meet a certain data type or value.","Correct":false},{"Text":"All of the options.","Correct":true}]},{"Question":"XSS attacks do not target the server, but instead use it to attack visitors instead.","Explanation":"XSS (cross-site scripting) attacks manipulate a server to attack its own visitors by reflecting the attackers data onto any visitors.","Image":"","isToF":true,"ToFAnswer":true,"Answers":[]},{"Question":"A reflected XSS attack is best described as:","Explanation":"A reflected attack is an attack in which a link contains the attack being reflected onto visitors. Visitors can click this link to make the server to reflect the attack onto them.","Image":"","isToF":false,"ToFAnswer":false,"Answers":[{"Text":"An attack where content saved on a page is reflected onto visitors of the website.","Correct":false},{"Text":"An attack where the attacker is able to view a visitor's activity by reflecting their data to the attacker.","Correct":false},{"Text":"An attack where a link contains the attack to be reflected onto visitors.","Correct":true},{"Text":"An attack where a link automatically downloads data onto a visitor's device.","Correct":false}]},{"Question":"A stored XSS attack can be characterised by which of the following:","Explanation":"Stored XSS attacks occur when an attacker stores malicious content on a webpage. This content is reflected onto visitors when they load the page. This attack does not always require for a link to be entered though, as the stored data can appear indirectly in many different places.","Image":"","isToF":false,"ToFAnswer":false,"Answers":[{"Text":"Always require a link to be clicked.","Correct":false},{"Text":"Involves storing malicious content on a webpage.","Correct":false},{"Text":"The attacker's data is reflected onto visitors of an affected webpage.","Correct":false},{"Text":"Involves storing malicious content on a webpage, where the attacker's data is reflected onto visitors of the webpage.","Correct":true}]},{"Question":"Using CSP headers and encoding user output correctly are both valid techniques to prevent XSS attacks.","Explanation":"CSP headers can be used to dictate how JavaScript code is run, and where it can be run from. Encoding user output is also useful as it can control how the user output is viewed by visitors.","Image":"","isToF":true,"ToFAnswer":true,"Answers":[]},{"Question":"Which of the following is not true about CSP?","Explanation":"CSP (Content security policy) can defend against vulnerabilities, but cannot entirely eliminate all of them. There is always the potential for unknown vulnerabilities to exist.","Image":"","isToF":false,"ToFAnswer":false,"Answers":[{"Text":"It removes all potential vulnerabilities revolving around JavaScript.","Correct":true},{"Text":"A common CSP is too provide users with all of the valid JavaScript sources files to be used.","Correct":false},{"Text":"Users may be able to report CSP violations to the server.","Correct":false},{"Text":"A CSP can prevent the execution of in-line JavaScript.","Correct":false}]},{"Question":"Which of the following is not a web-based cyberattack?","Explanation":"Buffer overflow attacks are not web-based attacks as they primarily occur elsewhere.","Image":"","isToF":false,"ToFAnswer":false,"Answers":[{"Text":"Cross-site scripting","Correct":false},{"Text":"Buffer overflow attacks","Correct":true},{"Text":"None of the options","Correct":false}]},{"Question":"Which of the following is not true?","Explanation":"XSS attacks are capable of stealing cookies from victims.","Image":"","isToF":false,"ToFAnswer":false,"Answers":[{"Text":"CSP violations can be reported by clients on some servers.","Correct":false},{"Text":"Attackers can abuse REST APIs via IDOR vulnerabilities.","Correct":false},{"Text":"Using cookies is a secure way to protect data from XSS attacks.","Correct":true},{"Text":"None of the options.","Correct":false}]},{"Question":"In which way is & encoded, to enforce security, in HTML?","Explanation":"The &amp; character is encoded as &amp;amp in HTML when enforcing security. This is to ensure that these characters can be displayed safely.","Image":"","isToF":false,"ToFAnswer":false,"Answers":[{"Text":"&amp","Correct":true},{"Text":"&quot","Correct":false},{"Text":"&apos","Correct":false},{"Text":"&gt","Correct":false}]}]}